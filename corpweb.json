{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "SEIS-616 template for assignment 1.",
  "Parameters": {
    "InstanceType": {
      "Type": "String",
      "Description": "Defines the instance type for the instances: t2.micro or t2.small",
      "Default": "t2.micro"
    },
    "KeyPair": {
      "Type": "String",
      "Description": "Sets the server key-pair name for the EC2 instances",
      "Default": "seis-616-key-pair"
    },
    "YourIp": {
      "Type": "String",
      "Description": "Specifies your public IP address in CIDR notation.",
      "Default": "73.94.211.125/32"
    }
  },
  "Resources": {
    "EngineeringVpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/18",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          { "Key": "Name", "Value": "Engineering-VPC" }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name", "Value": "EngineeringIGW"
          }
        ]
      }
    },
    "VPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "EngineeringVpc"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "EngineeringVpc"
        }
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      },
      "DependsOn": [
        "InternetGateway"
      ]
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
            "Ref": "EngineeringVpc"
        },
        "MapPublicIpOnLaunch" : "true",
        "CidrBlock": "10.0.0.0/24",
        "AvailabilityZone" : {
          "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]
        },
        "Tags" : [
          { "Key": "Name",
            "Value": "Website-Public-Subnet1"
          }
        ]
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
            "Ref": "EngineeringVpc"
        },
        "MapPublicIpOnLaunch" : "true",
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone" : {
          "Fn::Select" : [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]
        },
        "Tags" : [
          { "Key": "Name",
            "Value": "Website-Public-Subnet2"
          }
        ]
      }
    },
    "PublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet1" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },
    "PublicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet2" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },
    "WebserversSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allows SSH and HTTP access to EC2 instances",
        "VpcId": {
          "Ref": "EngineeringVpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": {
              "Ref": "YourIp"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name", "Value": "WebserversSG"
          }
        ]
      }
    },  
    "web1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "ImageId": "ami-08982f1c5bf93d976",
        "KeyName": {
          "Ref": "KeyPair"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "SecurityGroupIds": [
          {
            "Ref": "WebserversSG"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "web1"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash",
                "yum update -y",
                "yum install -y git httpd php",
                "service httpd start",
                "chkconfig httpd on",
                "aws s3 cp s3://seis665-public/index.php /var/www/html/"
              ]
            ]
          }
        }
      }
    },
    "web2": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "ImageId": "ami-08982f1c5bf93d976",
        "KeyName": {
          "Ref": "KeyPair"
        },
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "SecurityGroupIds": [
          {
            "Ref": "WebserversSG"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "web2"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash",
                "yum update -y",
                "yum install -y git httpd php",
                "service httpd start",
                "chkconfig httpd on",
                "aws s3 cp s3://seis665-public/index.php /var/www/html/"
              ]
            ]
          }
        }
      }
    },
    "EngineeringLBSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for the load balancer",
        "VpcId": {
          "Ref": "EngineeringVpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-EngineeringLBSG"
            }
          }
        ]
      }
    },
    "EngineeringLB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "EngineeringLB",
        "Subnets": [
          {
            "Ref": "PublicSubnet1"
          },
          {
            "Ref": "PublicSubnet2"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "EngineeringLBSG"
          }
        ],
        "Scheme": "internet-facing",
        "Type": "application",
        "Tags": [
          {
            "Key": "Name",
            "Value": "EngineeringLB"
          }
        ]
      }
    },
    "EngineeringWebservers": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "EngineeringWebservers",
        "Port": 80,
        "Protocol": "HTTP",
        "TargetType": "instance",
        "Targets": [
          { "Id": { "Ref": "web1" }, "Port": 80 },
          { "Id": { "Ref": "web2" }, "Port": 80 }
        ],
        "VpcId": {
          "Ref": "EngineeringVpc"
        },
        "HealthCheckProtocol": "HTTP",
        "HealthCheckPort": "80",
        "HealthCheckPath": "/"
      }
    },
    "LBListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "LoadBalancerArn": {
          "Ref": "EngineeringLB"
        },
        "Port": 80,
        "Protocol": "HTTP",
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "EngineeringWebservers"
            }
          }
        ]
      }
    }
  },
  "Outputs": {
   "WebUrl": {
      "Description": "The load balancer dns name after the stack is launched.",
      "Value": {
        "Fn::GetAtt": [
          "EngineeringLB",
          "DNSName"
        ]
      }
    }
  }
}